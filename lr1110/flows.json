[
    {
        "id": "a0b16dbb5faaacf9",
        "type": "tab",
        "label": "Collect CampusIoT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd0aacf5de34b8b9",
        "type": "tab",
        "label": "Collect TTNv3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2ee54474bad37467",
        "type": "tab",
        "label": "Collect Helium",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6aa09eba.735e88",
        "type": "tab",
        "label": "LoRaCloud Credentials",
        "disabled": false,
        "info": ""
    },
    {
        "id": "714750ad.4821f",
        "type": "tab",
        "label": "LR1110 Modem-E",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6cfcf5f5.9c1c4c",
        "type": "tab",
        "label": "DAS Parser",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fe92c6e7.4ff72",
        "type": "tab",
        "label": "GLS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "33c6911b.f9f16e",
        "type": "mqtt-broker",
        "name": "LNS",
        "broker": "lns.campusiot.imag.fr",
        "port": "8883",
        "tls": "e038e18.c53e52",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e038e18.c53e52",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "8314e5c1a28c6460",
        "type": "mqtt-broker",
        "name": "TTNv3 LR1110",
        "broker": "eu1.cloud.thethings.network",
        "port": "8883",
        "tls": "e038e18.c53e52",
        "clientid": "eu1.cloud.thethings.network",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "6e2e14a3.1147cc",
        "type": "link out",
        "z": "a0b16dbb5faaacf9",
        "name": "application",
        "links": [
            "bcc1609e.126fc8",
            "d2a7a32f.3004e",
            "1647abb9.cc75dc",
            "7058df19.536df",
            "b1ee40de.a0d488"
        ],
        "x": 1115,
        "y": 260,
        "wires": []
    },
    {
        "id": "4f190c00.84bc84",
        "type": "debug",
        "z": "a0b16dbb5faaacf9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1110,
        "y": 380,
        "wires": []
    },
    {
        "id": "2d629578.d9032a",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "add radio",
        "func": "function getRegion(frequency) {\n    if(frequency>=863000000 && frequency<870000000) {\n        return \"eu868\";\n    } else if(frequency>=433050000 && frequency<434790000) {\n        return \"eu433\";\n    } else if(frequency>=169400000 && frequency<169475000) {\n        return \"eu169\";\n    } else if(frequency>=2400000000 && frequency<2500000000) {\n        return \"ism2400\";\n    } else {\n        return undefined;\n    }\n}\n\nfunction getSubBandsEU868(frequency) {\n    if(frequency>=863000000 && frequency<868000000) {\n        return \"g\";\n    } else if(frequency>=868000000 && frequency<868600000) {\n        return \"g1\";\n    } else if(frequency>=868700000 && frequency<869200000) {\n        return \"g2\";\n    } else if(frequency>=869400000 && frequency<869650000) {\n        return \"g3\";\n    } else if(frequency>=869700000 && frequency<870000000) {\n        return \"g4\";\n    } else {\n        return undefined;\n    }\n    /* Duty Cycle */\n    /*\n    g (863.0 – 868.0 MHz): 1%\n    g1 (868.0 – 868.6 MHz): 1%\n    g2 (868.7 – 869.2 MHz): 0.1%\n    g3 (869.4 – 869.65 MHz): 10%\n    g4 (869.7 – 870.0 MHz): 1%\n    */\n}\n\nvar p = msg.payload;\n\nvar rxInfo = p.rxInfo;\n\nvar ri = undefined;\n\nrxInfo.forEach(function(e) {\n  if(ri === undefined) {\n      ri = e;\n  } else if(e.rssi > ri.rssi) {\n      ri = e;\n  }\n});\n\nri.date = Date.now();\nri.dr = p.txInfo.dr;\nri.frequency = p.txInfo.frequency;\nri.region = getRegion(ri.frequency);\nri.subband = getSubBandsEU868(ri.frequency);\n// Can not compute timeonair without the frame length\n//ri.toa = TimeOnAir.getLoRaWANTimeOnAir(size, 0, ri.dr)\n\n\nri.redundancy = rxInfo.length;\n\nmsg.payload.radio = ri;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 200,
        "wires": [
            [
                "6ae9579b.c63d4"
            ]
        ]
    },
    {
        "id": "ddb4a53c.b4b57",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "convert frame payload",
        "func": "if(msg.payload.data){\n    msg.payload.frmPayload = Buffer.from(msg.payload.data, 'base64');\n    msg.payload.size = msg.payload.frmPayload.length;\n} else {\n    msg.payload.size = 0;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 80,
        "wires": [
            [
                "cb521cd0.aadb"
            ]
        ]
    },
    {
        "id": "6ae9579b.c63d4",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "add now",
        "func": "\nmsg.payload.time = new Date().getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 260,
        "wires": [
            [
                "4f190c00.84bc84",
                "6e2e14a3.1147cc"
            ]
        ]
    },
    {
        "id": "cb521cd0.aadb",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "Flatten LPP",
        "func": "var p = msg.payload;\n\nfunction FlattenLPP(json) {\n    var o = {};\n    for (const p in json) {\n        var value = json[p];\n        if(typeof(value) === 'number') {\n            o[p] = value;\n        } else if(typeof(value) === 'object'){\n            for (const p2 in value) {\n                var value2 = value[p2];\n                if(typeof(value2) === 'number') {\n                    o[p + p2] = value2;\n                }\n            }\n        }\n    }\n    return o    \n}\n\nvar json = msg.payload.object;\n\nif(json) {\n    var o = FlattenLPP(json);\n    if(o) {\n        msg.payload.object = o;\n        return msg;\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "2d629578.d9032a"
            ]
        ]
    },
    {
        "id": "23dc752e.9de09a",
        "type": "mqtt in",
        "z": "a0b16dbb5faaacf9",
        "name": "Application Rx LR1110",
        "topic": "application/APPLICATION_ID/device/+/rx",
        "qos": "2",
        "datatype": "auto",
        "broker": "33c6911b.f9f16e",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "4026f9bb.2220e"
            ]
        ]
    },
    {
        "id": "4026f9bb.2220e",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 320,
        "wires": [
            [
                "dc964d59.24ff1",
                "b1e5523b.fa2158"
            ]
        ]
    },
    {
        "id": "dc964d59.24ff1",
        "type": "function",
        "z": "a0b16dbb5faaacf9",
        "name": "add time",
        "func": "var p = msg.payload;\n\nmsg.payload = new Date().getTime() + \";MSG/\"+msg.topic+\";\" + msg.payload; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 460,
        "wires": [
            [
                "84ba827e.ecaf68"
            ]
        ]
    },
    {
        "id": "84ba827e.ecaf68",
        "type": "file",
        "z": "a0b16dbb5faaacf9",
        "name": "append to log file",
        "filename": "/log/lr1110.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 850,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b1e5523b.fa2158",
        "type": "json",
        "z": "a0b16dbb5faaacf9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 200,
        "wires": [
            [
                "ddb4a53c.b4b57",
                "4f190c00.84bc84"
            ]
        ]
    },
    {
        "id": "6a253db2deb0d846",
        "type": "mqtt in",
        "z": "bd0aacf5de34b8b9",
        "name": "TTNv3 LR1110 up",
        "topic": "v3/lr1110@ttn/devices/+/up",
        "qos": "1",
        "datatype": "auto",
        "broker": "8314e5c1a28c6460",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "e8d0b9c7b607407b"
            ]
        ]
    },
    {
        "id": "c7ec61a11d07cea1",
        "type": "json",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 280,
        "wires": [
            [
                "44343c329ac04996",
                "a89068a4c0f4063c"
            ]
        ]
    },
    {
        "id": "44343c329ac04996",
        "type": "function",
        "z": "bd0aacf5de34b8b9",
        "name": "convert frame payload",
        "func": "if(msg.payload.payload_raw){\n    msg.payload.frmPayload = Buffer.from(msg.payload.payload_raw, 'base64');\n    msg.payload.size = msg.payload.frmPayload.length;\n} else {\n    msg.payload.size = 0;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 320,
        "wires": [
            [
                "c1f601f6a8cc5ded"
            ]
        ]
    },
    {
        "id": "b3878f3cddd9be26",
        "type": "link out",
        "z": "bd0aacf5de34b8b9",
        "name": "application",
        "links": [],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "c1f601f6a8cc5ded",
        "type": "function",
        "z": "bd0aacf5de34b8b9",
        "name": "add time",
        "func": "var p = msg.payload;\n\nif(p.received_at) {\n    msg.received_at = Date.parse(p.received_at);\n} else {\n    msg.received_at = new Date().getTime();\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "b3878f3cddd9be26",
                "a89068a4c0f4063c"
            ]
        ]
    },
    {
        "id": "d3a628e5b102793b",
        "type": "function",
        "z": "bd0aacf5de34b8b9",
        "name": "add time",
        "func": "var p = msg.payload;\n\nmsg.payload = new Date().getTime() + \";MSG/\"+msg.topic+\";\" + msg.payload; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 500,
        "wires": [
            [
                "e34dd71d78443dce",
                "3f3f7a5e0f610f80"
            ]
        ]
    },
    {
        "id": "e34dd71d78443dce",
        "type": "file",
        "z": "bd0aacf5de34b8b9",
        "name": "append to log file",
        "filename": "/log/lr1110-ttnv3.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1070,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a89068a4c0f4063c",
        "type": "debug",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "3f3f7a5e0f610f80",
        "type": "debug",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 500,
        "wires": []
    },
    {
        "id": "024cd1ede2a7f655",
        "type": "comment",
        "z": "bd0aacf5de34b8b9",
        "name": "API TTN",
        "info": "https://www.thethingsindustries.com/docs/integrations/mqtt/",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "e8d0b9c7b607407b",
        "type": "function",
        "z": "bd0aacf5de34b8b9",
        "name": "dispatch",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "c7ec61a11d07cea1",
                "d3a628e5b102793b"
            ]
        ]
    },
    {
        "id": "14e6d7e8d1eab0a9",
        "type": "function",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "func": "var r= {\"end_device_ids\":{\"device_id\":\"stm32wl55-6035\",\"application_ids\":{\"application_id\":\"stm32wl55\"},\"dev_eui\":\"0080E11505006035\",\"join_eui\":\"0101010101010101\",\"dev_addr\":\"260B7F9F\"},\"correlation_ids\":[\"as:up:01F2H370S542B6B5556KDHX32Q\",\"ns:uplink:01F2H3706AGVJENRH4EK8X9M74\",\"pba:conn:up:01F213FATNNQHVYKECYF9SYTXC\",\"pba:uplink:01F2H3704EDETH16WF04JM40K1\",\"rpc:/ttn.lorawan.v3.GsNs/HandleUplink:01F2H3706A0JGYKSMWXMKDT1GN\",\"rpc:/ttn.lorawan.v3.NsAs/HandleUplink:01F2H370S4PWJF4AC65GVSMMX3\"],\"received_at\":\"2021-04-05T13:23:08.197630676Z\",\"uplink_message\":{\"session_key_id\":\"AXiiMws0YnsIwBg98geLmA==\",\"f_port\":2,\"f_cnt\":1,\"frm_payload\":\"AHOGoAFnAKoCaGQDAP4EAQA=\",\"rx_metadata\":[{\"gateway_ids\":{\"gateway_id\":\"packetbroker\"},\"packet_broker\":{\"message_id\":\"01F2H3704EDETH16WF04JM40K1\",\"forwarder_net_id\":\"000013\",\"forwarder_tenant_id\":\"ttn\",\"forwarder_cluster_id\":\"ttn-v2-eu-3\",\"home_network_net_id\":\"000013\",\"home_network_tenant_id\":\"ttn\",\"home_network_cluster_id\":\"ttn-eu1\",\"hops\":[{\"received_at\":\"2021-04-05T13:23:07.534327784Z\",\"sender_address\":\"40.113.68.198\",\"receiver_name\":\"router-dataplane-f8764784f-p5gbg\",\"receiver_agent\":\"pbdataplane/1.5.2 go/1.16.2 linux/amd64\"},{\"received_at\":\"2021-04-05T13:23:07.534728357Z\",\"sender_name\":\"router-dataplane-f8764784f-p5gbg\",\"sender_address\":\"forwarder_uplink\",\"receiver_name\":\"router-7665c7b677-7tm85\",\"receiver_agent\":\"pbrouter/1.5.2 go/1.16.2 linux/amd64\"},{\"received_at\":\"2021-04-05T13:23:07.536609172Z\",\"sender_name\":\"router-7665c7b677-7tm85\",\"sender_address\":\"deliver.000013_ttn_ttn-eu1.uplink\",\"receiver_name\":\"router-dataplane-f8764784f-n76ql\",\"receiver_agent\":\"pbdataplane/1.5.2 go/1.16.2 linux/amd64\"}]},\"rssi\":-111,\"channel_rssi\":-111,\"snr\":-15.5,\"uplink_token\":\"eyJnIjoiWlhsS2FHSkhZMmxQYVVwQ1RWUkpORkl3VGs1VE1XTnBURU5LYkdKdFRXbFBhVXBDVFZSSk5GSXdUazVKYVhkcFlWaFphVTlwU25oWU1sSXdXakpLVVZVeVVteFBSVlkxVlVoak1rbHBkMmxrUjBadVNXcHZhVk42VGxGYVYyeFJVVEJ2TVZkRmVHcGxWRlY2WkRCdmRFMXRVbWxhZVVvNUxuWkRlbVF4VXpRMGVGaHJkRTFKVjNGQ05qRllNMmN1ZEVScFVYZElPRVJwTlZnNWNVYzVjUzVqVEdadE5ubHJWVmM1YnpoRmRsSnJla3hXVGs1T1lXUjJSR3B1Y0dFM1gySjVWR0ZQZWxCRE1UUTNkRGhrZFhNNVpsOWxVV2RVZW5kVE5tUlFla0ZsZG1FeWQyeFFlRXRhTXpFNVJEWXpSVkJ3YldVdGVXUlZjemhaVDE5bE9YTkdiVTkxVTFwT2VXOVJjVlpaYXpkRllXNUVUM0ZFUkVNNVptNWtTazVMTVhodlJUWkhUa1l0TFVsNlJsWmtPRVJ5TFVaM2REQkVOMWhyZFV0cVdGUkJkWGhyTlhwTWJXOUZPSEpSTG14UWQwNVpSVVJ5YkhFNGNUUTVaVEl6T0VSR2FsRT0iLCJhIjp7ImZuaWQiOiIwMDAwMTMiLCJmdGlkIjoidHRuIiwiZmNpZCI6InR0bi12Mi1ldS0zIn19\"},{\"gateway_ids\":{\"gateway_id\":\"packetbroker\"},\"packet_broker\":{\"message_id\":\"01F2H370A107TJVR3Q4Z5SDRW8\",\"forwarder_net_id\":\"000013\",\"forwarder_tenant_id\":\"ttn\",\"forwarder_cluster_id\":\"ttn-v2-eu-4\",\"home_network_net_id\":\"000013\",\"home_network_tenant_id\":\"ttn\",\"home_network_cluster_id\":\"ttn-eu1\",\"hops\":[{\"received_at\":\"2021-04-05T13:23:07.713346748Z\",\"sender_address\":\"52.169.150.138\",\"receiver_name\":\"router-dataplane-f8764784f-5hp49\",\"receiver_agent\":\"pbdataplane/1.5.2 go/1.16.2 linux/amd64\"},{\"received_at\":\"2021-04-05T13:23:07.722319837Z\",\"sender_name\":\"router-dataplane-f8764784f-5hp49\",\"sender_address\":\"forwarder_uplink\",\"receiver_name\":\"router-7665c7b677-kmdr7\",\"receiver_agent\":\"pbrouter/1.5.2 go/1.16.2 linux/amd64\"},{\"received_at\":\"2021-04-05T13:23:07.725273382Z\",\"sender_name\":\"router-7665c7b677-kmdr7\",\"sender_address\":\"deliver.000013_ttn_ttn-eu1.uplink\",\"receiver_name\":\"router-dataplane-f8764784f-n76ql\",\"receiver_agent\":\"pbdataplane/1.5.2 go/1.16.2 linux/amd64\"}]},\"time\":\"2021-04-05T13:23:06.478237Z\",\"rssi\":-106,\"signal_rssi\":-119,\"channel_rssi\":-106,\"snr\":-13,\"frequency_offset\":\"-18\",\"uplink_token\":\"eyJnIjoiWlhsS2FHSkhZMmxQYVVwQ1RWUkpORkl3VGs1VE1XTnBURU5LYkdKdFRXbFBhVXBDVFZSSk5GSXdUazVKYVhkcFlWaFphVTlwU2tWVVJrMTRaVmRrUkZac1NrdGpWa1pYV2tNd2VrbHBkMmxrUjBadVNXcHZhV1ZVVFhSV2JFWlBUakp3VVZacVdscGFSMFV6WVZWNFlWb3hiRTFWVTBvNUxsY3diV1o0TnpoUlIzTXdibkY2UmtGSE0ydG1kVkV1TW0wdFowazNUV1ZRZDIxdFQxbFhTaTVSTjBSaWMxYzNWWEpmVFRORlVGbHZlamgxZHpacmVWaFRWM0JzY0ZKSFpHdElkRzlMZDI4d1pucE1PWFp0VG1wQ1gzbHJkREEyV1dsT2RIQmFNR1JPT0VKcloxQlVXVzB4YkZwM1RUWk5ZVWRrTkZGVmVGSmxiblp3ZG1VNFVVTmlUV0pxYW5NdFUyTXlhMFYzUTBaR1J6QkhibGxSUmpoU1lrUnROWGhSVVhScmFIaFBWMjFKTTJOeVRuUTRURUZOYlVWUlIzWkdZWFJOZUdOU05DMDNRVFI1TUcxVE9DNVRUalpVWlZKRk9FcFJiVGxtU2pOQmVEWmtlVlozIiwiYSI6eyJmbmlkIjoiMDAwMDEzIiwiZnRpZCI6InR0biIsImZjaWQiOiJ0dG4tdjItZXUtNCJ9fQ==\"}],\"settings\":{\"data_rate\":{\"lora\":{\"bandwidth\":125000,\"spreading_factor\":12}},\"coding_rate\":\"4/5\",\"frequency\":\"867500000\"},\"received_at\":\"2021-04-05T13:23:07.594547933Z\",\"consumed_airtime\":\"1.646592s\"}};\n\nmsg.payload = r;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 120,
        "wires": [
            [
                "2f54098d0e0a89b0"
            ]
        ]
    },
    {
        "id": "7c9339f80570b492",
        "type": "inject",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "14e6d7e8d1eab0a9"
            ]
        ]
    },
    {
        "id": "2f54098d0e0a89b0",
        "type": "debug",
        "z": "bd0aacf5de34b8b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1190,
        "y": 120,
        "wires": []
    },
    {
        "id": "edfba8c1.9acfd8",
        "type": "inject",
        "z": "6aa09eba.735e88",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "flow",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "574f4f71.4c11"
            ]
        ]
    },
    {
        "id": "574f4f71.4c11",
        "type": "function",
        "z": "6aa09eba.735e88",
        "name": "Set LoRaCloud credentials",
        "func": "const DAS_URL = \"https://das.loracloud.com/api/v1/device/send\" \nconst DAS_AUTH_TOKEN =\"TO SET\";\n\nglobal.set('DAS_URL', DAS_URL);\nglobal.set('DAS_AUTH_TOKEN', DAS_AUTH_TOKEN);\n\nconst GLS_URL = \"https://gls.loracloud.com/api/v3/solve/gnss_lr1110_singleframe\" \nconst GLS_AUTH_TOKEN =\"TO SET\"\n\nglobal.set('GLS_URL', GLS_URL);\nglobal.set('GLS_AUTH_TOKEN', GLS_AUTH_TOKEN);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "879981d.b0ee3",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "Filter LR1110",
        "func": "var payload = msg.payload;\n\nif(payload.type === \"dataMessage\" && payload.tags.includes(\"lr1110\")) {\n    var lora = payload.metadata.network.lora;\n    msg.deveui = lora.devEUI.toLowerCase();\n    if(lora.location){\n        msg.lat = lora.location.lat;\n        msg.lon = lora.location.lon;\n    }\n    return msg;\n}\nreturn undefined",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 240,
        "wires": [
            [
                "edf38aeb.98c93",
                "b1609b63.714f08"
            ]
        ]
    },
    {
        "id": "b1ee40de.a0d488",
        "type": "link in",
        "z": "714750ad.4821f",
        "name": "",
        "links": [
            "6e2e14a3.1147cc",
            "8901f62a.a9b968"
        ],
        "x": 55,
        "y": 140,
        "wires": [
            [
                "d8d459f3.703a28"
            ]
        ]
    },
    {
        "id": "d8d459f3.703a28",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "Filter LR1110",
        "func": "var payload = msg.payload;\n\nif(payload.applicationName.startsWith(\"LR1110\")) {\n    return msg;\n}\nreturn undefined",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "b1609b63.714f08",
                "49a0f7cc.18952"
            ]
        ]
    },
    {
        "id": "7a729fd0.8657d8",
        "type": "link in",
        "z": "714750ad.4821f",
        "name": "",
        "links": [
            "16cc577e.d91489",
            "fbf704ba.589e18"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "879981d.b0ee3",
                "b1609b63.714f08"
            ]
        ]
    },
    {
        "id": "5ca65f28.f8482",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "Prepare DAS request",
        "func": "const DAS_URL = global.get('DAS_URL');\nconst DAS_AUTH_TOKEN = global.get('DAS_AUTH_TOKEN');\n\nvar payload = msg.payload;\n\nvar diffSec=315964800;\nvar gps_time = payload.time - diffSec;\n\nif(!payload.frmPayload) return;\n\nvar modem_e_payload = payload.frmPayload.toString(\"hex\");\n\nvar d = payload.devEUI;\nvar fcnt = payload.fCnt;\nvar deveui = d.match( /.{1,2}/g ).join( \"-\" );\n\nvar json_dict={\n    \"deveui\":deveui,\n    \"uplink\":{\n        \"msgtype\":\"modem\",\n        \"payload\":modem_e_payload,\n        \"timestamp\": payload.time,\n        \"fcnt\":fcnt\n    }\n};\nif(payload.tx_info) {\n    json_dict.uplink.dr = payload.tx_info.dr;\n    json_dict.uplink.freq = payload.tx_info.frequency;\n}\n\n//json_dict.uplink.freq = ;\njson_dict.uplink.gnss_capture_time = gps_time;\njson_dict.uplink.gnss_capture_time_accuracy = 15;\n\n// Optional. Assistance position WGS84, (latitude, longitude) [deg]\njson_dict.uplink.gnss_assist_position = [ 45.1823473, 5.73548 ];\n// Optional. Assistance altitude, (meters above WGS84 reference ellipsoid) [m]\njson_dict.uplink.gnss_assist_altitude = 220.0;\n\nvar headers = {\n    'Accept':'application/json',\n    'Authorization': DAS_AUTH_TOKEN\n}\n\nmsg = {\n    \"url\": DAS_URL,\n    \"headers\": headers,\n    \"payload\": json_dict,\n    \"deveui\":  d\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 140,
        "wires": [
            [
                "1894e2b5.9e39fd"
            ]
        ]
    },
    {
        "id": "1894e2b5.9e39fd",
        "type": "http request",
        "z": "714750ad.4821f",
        "name": "DAS Lora Cloud",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "basic",
        "x": 800,
        "y": 240,
        "wires": [
            [
                "43b074bd.92ae7c"
            ]
        ]
    },
    {
        "id": "bab5b243.80b428",
        "type": "debug",
        "z": "714750ad.4821f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1170,
        "y": 160,
        "wires": []
    },
    {
        "id": "43b074bd.92ae7c",
        "type": "json",
        "z": "714750ad.4821f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 900,
        "y": 40,
        "wires": [
            [
                "bab5b243.80b428",
                "c891f9d0.3b4ec",
                "6a89ac18.ea606c",
                "33b55a4b.5548fe"
            ]
        ]
    },
    {
        "id": "c891f9d0.3b4ec",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "Extract position_solution",
        "func": "var payload = msg.payload;\nvar result = payload.result;\nif(result.position_solution) {\n    msg.payload = result.position_solution;\n    return msg;\n}\nreturn undefined;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 100,
        "wires": [
            [
                "d29bf72a.1cbe7"
            ]
        ]
    },
    {
        "id": "d29bf72a.1cbe7",
        "type": "debug",
        "z": "714750ad.4821f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1470,
        "y": 100,
        "wires": []
    },
    {
        "id": "edf38aeb.98c93",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "add devEUI and fCnt",
        "func": "var payload = msg.payload;\n\nvar lora = payload.metadata.network.lora;\nvar location = lora.location;\n\nif(lora) {\n    payload.fCnt = lora.fcnt;\n    payload.devEUI = lora.devEUI;\n    if(location) {\n       payload.location = location;\n    }\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 240,
        "wires": [
            [
                "5ca65f28.f8482",
                "5f669ef7.cd2198"
            ]
        ]
    },
    {
        "id": "b1609b63.714f08",
        "type": "debug",
        "z": "714750ad.4821f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "1d86b068.433308",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "add header",
        "func": "var p = msg.payload;\n\nif(p.timestamp) {\n    msg.payload.time = Date.parse(p.timestamp);\n} else {\n    msg.payload.time = new Date().getTime();\n}\n\nmsg.payload = new Date().getTime() + \";MSG/\"+msg.topic+\";\" + msg.payload; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "5187d2c0.a63104"
            ]
        ]
    },
    {
        "id": "5187d2c0.a63104",
        "type": "file",
        "z": "714750ad.4821f",
        "name": "append to log file",
        "filename": "/log/das.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1410,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6a89ac18.ea606c",
        "type": "link out",
        "z": "714750ad.4821f",
        "name": "DAS Parser",
        "links": [
            "4bbccb54.e5d104"
        ],
        "x": 1115,
        "y": 40,
        "wires": []
    },
    {
        "id": "49a0f7cc.18952",
        "type": "function",
        "z": "714750ad.4821f",
        "name": "add devEUI",
        "func": "\nmsg.deveui = msg.payload.devEUI;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "5ca65f28.f8482",
                "5f669ef7.cd2198"
            ]
        ]
    },
    {
        "id": "fc4bd2e4.e13838",
        "type": "comment",
        "z": "714750ad.4821f",
        "name": "CampusIoT",
        "info": "",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "38cabb85.4f3d64",
        "type": "comment",
        "z": "714750ad.4821f",
        "name": "LiveObject",
        "info": "",
        "x": 140,
        "y": 200,
        "wires": []
    },
    {
        "id": "33b55a4b.5548fe",
        "type": "json",
        "z": "714750ad.4821f",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1110,
        "y": 260,
        "wires": [
            [
                "1d86b068.433308"
            ]
        ]
    },
    {
        "id": "5f669ef7.cd2198",
        "type": "debug",
        "z": "714750ad.4821f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 840,
        "y": 400,
        "wires": []
    },
    {
        "id": "4bbccb54.e5d104",
        "type": "link in",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [
            "6a89ac18.ea606c"
        ],
        "x": 135,
        "y": 300,
        "wires": [
            [
                "87c60ad0.22798",
                "21b5b16.1786cce"
            ]
        ]
    },
    {
        "id": "6f1f4c32.c3c7ec",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Parse TLV output",
        "func": "function pad(b) {\n  const h = b.toString(16);\n  return (h + \"\").length < 2 ? \"0\" + h : h;\n}\n\nfunction parse_wifi(devEui, bytes) {\n    const das_query = {\n        \"deveui\":devEui.match( /.{1,2}/g ).join( '-' ),\n        \"uplink\":{\n            \"msgtype\":\"wifi\",\n            \"payload\": `01${bytes}`,\n        }\n    };\n\n    bytes = Buffer.from(bytes, \"hex\");\n    var addresses = [];\n    for (var i = 0; i < bytes.length; i += 7) {\n        var rssi_raw = bytes[i + 0];\n        var bssid_slice = bytes.slice(i + 1, i + 7);\n        var bssid = [];\n        bssid_slice.forEach(byte => {\n            bssid.push(pad(byte));\n        });\n        addresses.push({\n            \"macAddress\": bssid.join(\":\"),\n            \"signalStrength\":  (rssi_raw > 127) ? rssi_raw - 256 : rssi_raw,\n        });\n    }\n    \n    const lorawan = [{\n        \"gatewayId\": \"fake\",\n        \"antennaId\": 0,\n        \"rssi\": 0,\n        \"snr\":0,\n        \"antennaLocation\": {\n            \"latitude\": 0.0,\n            \"longitude\": 0.0,\n            \"altitude\": 0.0\n        }\n    }];\n    \n    var gls_query = {\n       \"lorawan\": lorawan,\n       \"wifiAccessPoints\": addresses,\n    };\n    gls_query.wifiAccessPoints.forEach(ap => {\n        delete ap.type;\n        delete ap.channel;\n    });\n    \n    \n    return {\n        \"type\": \"Wi-Fi\",\n        \"addresses\": addresses,\n        \"raw\": bytes,\n        \"gls_query\": gls_query,\n        \"das_query\": das_query,\n    };\n}\n\nfunction parse_gnss(antenna, devEui, data) {\n    const bit_mask_has_location = 1;\n    const has_assisted_location = (parseInt(data.slice(6, 8), 16) & bit_mask_has_location) !== 0;\n    var das_query = {\n        \"deveui\":devEui.match( /.{1,2}/g ).join( \"-\" ),\n        \"uplink\":{\n            \"msgtype\":\"gnss\",\n            \"payload\": data,\n        }\n    };\n    if (has_assisted_location === false){\n       das_query.uplink.gnss_assist_position = global.get(\"device_assistance_coordinates\")\n    }\n    \n    return {\n        \"type\": `GNSS - ${antenna} antenna`,\n        \"data\": data,\n        \"das_query\": das_query,\n    };\n}\n\nfunction parse_signed_2_bytes_int(value) {\n    var value_int =  parseInt(value, 16);\n    if ((value_int & 0x8000) > 0) {\n        value_int = value_int - 0x10000;\n    }\n    return value_int;\n}\n\nfunction parse_acc(data) {\n    const move_history = parseInt(data.slice(0, 2), 16);\n    const acc = {\n        'x': parse_signed_2_bytes_int(data.slice(2, 6), 16),\n        'y': parse_signed_2_bytes_int(data.slice(6, 10), 16),\n        'z': parse_signed_2_bytes_int(data.slice(10, 14), 16),\n    };\n    const temperature =  parse_signed_2_bytes_int(data.slice(14, 18), 16)/100;\n    \n    return {\n        \"type\": \"acc\",\n        \"move_history\": move_history,\n        \"acc_mg\": acc,\n        \"temperature_C\": temperature\n    };\n}\n\nfunction parse_charge(data) {\n    return {\n        \"type\": \"charge\",\n        \"charge_mAh\":  parseInt(data, 16),\n    };\n}\n\nfunction create_message(payload, uplink, topic) {\n    return {\n        \"payload\": payload,\n        \"uplink\": uplink,\n        \"topic\": topic,\n    };\n}\n\n\n\n\n\nmsg.payload.forEach( stream_array => {\n    var index = 0;\n    var stream = stream_array[1];\n    \n    while(index < stream.length) {\n        var tag = parseInt(stream.slice(index, index + 2), 16);\n        index += 2;\n        var length = parseInt(stream.slice(index, index + 2), 16);\n        index += 2;\n        var value = stream.slice(index, index + length*2);\n        index += length * 2;\n        \n        \n        switch (tag) {\n            case 5:         // GNSS - No specific antenna\n                node.send(\n                    create_message(\n                        parse_gnss(\"\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 6:\n                node.send(\n                    create_message(\n                        parse_gnss(\"PCB\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 7:\n                node.send(\n                    create_message(\n                        parse_gnss(\"Patch\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 8:\n                node.send(\n                    create_message(\n                        parse_wifi(msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 9:\n                node.send(\n                    create_message(\n                        parse_acc(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 10:\n                node.send(\n                    create_message(\n                        parse_charge(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 11: // TODO\n            default:\n                continue;\n        }\n    }\n    \n});\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 300,
        "wires": [
            [
                "cfa3f291.69d678",
                "2c62c5aa.b5412a"
            ]
        ]
    },
    {
        "id": "cfa3f291.69d678",
        "type": "switch",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Wi-Fi",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "GNSS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "428dfc2a.71c29c"
            ],
            [
                "af6f18cc.74c848"
            ],
            [
                "6cd65ddb.cba934"
            ]
        ],
        "outputLabels": [
            "Wi-Fi",
            "GNSS",
            "Tracker"
        ],
        "info": "Route data regarding their content:\n* Wi-Fi\n* GNSS\n* Tracker data (accelerometer/battery)"
    },
    {
        "id": "6a8ea219.fb4414",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Prepare Wi-Fi request",
        "func": "const DAS_URL = global.get('DAS_URL');\nconst DAS_AUTH_TOKEN = global.get('DAS_AUTH_TOKEN');\n\nmsg.url = DAS_URL;\nvar das_token = DAS_AUTH_TOKEN;\n\nmsg.method = \"POST\";\nmsg.headers = {\n    'Authorization': das_token,\n    'Content-Type': 'application/json',\n};\n\nmsg.data = msg.payload;\nmsg.payload = msg.payload.das_query;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 241,
        "y": 520,
        "wires": [
            [
                "d5e50beb.3c7f4"
            ]
        ]
    },
    {
        "id": "d5e50beb.3c7f4",
        "type": "http request",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": true,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 451,
        "y": 520,
        "wires": [
            [
                "9669e5c4.cc0a",
                "f3416c00.1226b",
                "a3ab5325.0f7488"
            ]
        ]
    },
    {
        "id": "9669e5c4.cc0a",
        "type": "json",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 591,
        "y": 520,
        "wires": [
            [
                "b5f0603a.dccc7",
                "3d0c0ab3.c122c6"
            ]
        ]
    },
    {
        "id": "b5f0603a.dccc7",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Create worldmap object",
        "func": "if (msg.payload.result === null) return;\n\nconst devEui = msg.uplink.devEui.match( /.{1,2}/g ).join( '-' );\n\ntry {\n    const position_solution = msg.payload.result.position_solution;\n    const coordinates = position_solution.llh;\n    msg.payload = {\n        \"deveui\": msg.uplink.devEui,\n        \"name\": `${devEui} (Wi-Fi)`,\n        \"lat\": coordinates[0],\n        \"lon\": coordinates[1],\n        \"alt\": coordinates[2],\n        \"algo\": position_solution.algorithm_type,\n        \"accuracy\": position_solution.accuracy,\n        \"icon\": \"fa-wifi\",\n        \"command\": {\n            \"lat\": coordinates[0],\n            \"lon\": coordinates[1],\n            \"layer\": \"OSM\",\n            \"zoom\": 16,\n        }\n    }\n    return [msg, null];\n} catch(err) {\n    msg.payload = msg.payload.result.log_messages;\n    return [null, msg];\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "x": 791,
        "y": 480,
        "wires": [
            [
                "db96bfc8.caf838"
            ],
            [
                "5b21ba85.77da44"
            ]
        ]
    },
    {
        "id": "428dfc2a.71c29c",
        "type": "link out",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [
            "f30fa5e2.6e5648",
            "314f7c36.4d0234"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "f30fa5e2.6e5648",
        "type": "link in",
        "z": "6cfcf5f5.9c1c4c",
        "name": "To prepare Wi-Fi request",
        "links": [
            "428dfc2a.71c29c"
        ],
        "x": 96,
        "y": 520,
        "wires": [
            [
                "6a8ea219.fb4414"
            ]
        ]
    },
    {
        "id": "beb7d133.b4dff",
        "type": "link in",
        "z": "6cfcf5f5.9c1c4c",
        "name": "To worldmap",
        "links": [
            "db96bfc8.caf838",
            "31c1b945.3caece"
        ],
        "x": 95,
        "y": 800,
        "wires": [
            [
                "3770f88.4317408",
                "d8db421.50eb84"
            ]
        ]
    },
    {
        "id": "db96bfc8.caf838",
        "type": "link out",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [
            "1a4a5d79.494a6b",
            "beb7d133.b4dff"
        ],
        "x": 956,
        "y": 460,
        "wires": []
    },
    {
        "id": "c5792215.194c",
        "type": "link in",
        "z": "6cfcf5f5.9c1c4c",
        "name": "To prepare GNSS request",
        "links": [
            "af6f18cc.74c848"
        ],
        "x": 95,
        "y": 700,
        "wires": [
            [
                "8559ae0e.008668"
            ]
        ]
    },
    {
        "id": "8559ae0e.008668",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Prepare GNSS request",
        "func": "const DAS_URL = global.get('DAS_URL');\nconst DAS_AUTH_TOKEN = global.get('DAS_AUTH_TOKEN');\n\nmsg.url = DAS_URL;\nvar das_token = DAS_AUTH_TOKEN;\n\nmsg.method = \"POST\";\nmsg.headers = {\n    'Authorization': das_token,\n    'Content-Type': 'application/json',\n};\n\nmsg.data = msg.payload;\nmsg.payload = msg.payload.das_query;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 700,
        "wires": [
            [
                "c434c8d6.e11f48"
            ]
        ]
    },
    {
        "id": "c434c8d6.e11f48",
        "type": "http request",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "477a8ad3.9a2824",
                "3a5ac9f8.f19b86"
            ]
        ]
    },
    {
        "id": "477a8ad3.9a2824",
        "type": "json",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 700,
        "wires": [
            [
                "c231d480.c1d418",
                "1120fe47.9b4332",
                "3d0c0ab3.c122c6"
            ]
        ]
    },
    {
        "id": "af6f18cc.74c848",
        "type": "link out",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [
            "c5792215.194c"
        ],
        "x": 755,
        "y": 300,
        "wires": []
    },
    {
        "id": "c231d480.c1d418",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Create worldmap object",
        "func": "/*\nmsg.payload = {\"result\":{\n  \"llh\":              [45.2, 5.7, 200],\n},\"warnings\":[],\"errors\":[\"GNSS solver error [1]: Not enough viewable satellites\"]}\n*/\n\nif (msg.payload.result === null) return;\n\n\ntry {\n    const device_name = msg.topic.split('/')[2];\n    const devEui = msg.uplink.devEui.match( /.{1,2}/g ).join( '-' );\n    const data = msg.payload.result;\n    \n    \n    \n    const position_solution = msg.payload.result.position_solution;\n    const coordinates = position_solution.llh;\n    msg.payload = {\n        \"deveui\": msg.uplink.devEui,\n        \"name\": `${devEui} (${msg.data.type})`,\n        \"lat\": coordinates[0],\n        \"lon\": coordinates[1],\n        \"alt\": coordinates[2],\n        \"algo\": position_solution.algorithm_type,\n        \"accuracy\": position_solution.accuracy,\n        \"icon\": \"fa-wifi\",\n        \"command\": {\n            \"lat\": coordinates[0],\n            \"lon\": coordinates[1],\n            \"layer\": \"OSM\",\n            \"zoom\": 16,\n        }\n    }\n    return [msg, null];\n} catch(err) {\n    const devEui = msg.uplink.devEui.match( /.{1,2}/g ).join( '-' );\n    msg.payload = msg.payload.result.log_messages;\n    return [null, msg];\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "x": 790,
        "y": 700,
        "wires": [
            [
                "31c1b945.3caece"
            ],
            [
                "b1b88185.f4429"
            ]
        ]
    },
    {
        "id": "31c1b945.3caece",
        "type": "link out",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [
            "1a4a5d79.494a6b",
            "beb7d133.b4dff"
        ],
        "x": 955,
        "y": 680,
        "wires": []
    },
    {
        "id": "b1b88185.f4429",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "DAS GNSS Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1030,
        "y": 720,
        "wires": []
    },
    {
        "id": "5b21ba85.77da44",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "DAS Wi-Fi Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1041,
        "y": 520,
        "wires": []
    },
    {
        "id": "6cd65ddb.cba934",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "LR1110 Tracker environmental data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "4fc837f6.00dee8",
        "type": "comment",
        "z": "6cfcf5f5.9c1c4c",
        "name": "License",
        "info": "Revised BSD License\nCopyright Semtech Corporation 2020. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n* Neither the name of the Semtech corporation nor the\n  names of its contributors may be used to endorse or promote products\n  derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL SEMTECH S.A. BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "124fe7f9.acd1b8",
        "type": "comment",
        "z": "6cfcf5f5.9c1c4c",
        "name": "_________________________      CONFIG      _________________________",
        "info": "Demo AS code Modem-E v1.0.1\n\n---\n\nv1.0.1\n\n- Fix bug with Wi-Fi http request output that is not converted to json\n- Rename the *Force port to downlink GNSS assisted position*\n",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "c5e555f0.56c63",
        "type": "inject",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Assistance coordinates for GNSS autonomous scans",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "[45.1823473,5.73548]",
        "payloadType": "json",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "b22d907b.70f41"
            ]
        ]
    },
    {
        "id": "b22d907b.70f41",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Assistance coordinates",
        "func": "global.set('device_assistance_coordinates', msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f3416c00.1226b",
        "type": "link out",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "links": [],
        "x": 1195,
        "y": 620,
        "wires": []
    },
    {
        "id": "3770f88.4317408",
        "type": "worldmap",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "path": "/worldmap",
        "x": 200,
        "y": 800,
        "wires": []
    },
    {
        "id": "1120fe47.9b4332",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Force port to downlink GNSS assistance position",
        "func": "// This block exists because the DAS is returning value 0\n// for the dnlink.port field.\n// This is the trigger that this downlink has to be transported on application level\n\nfor (const eui in msg.payload.result){\n    if ((msg.payload.result.dnlink !== null) && (msg.payload.result.dnlink.port === 0)){\n        msg.payload.result.dnlink.port = global.get('port_gnss_push_solver_message_port');\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 620,
        "wires": [
            [
                "4b894002.9a24f"
            ]
        ]
    },
    {
        "id": "4b894002.9a24f",
        "type": "json",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "f3416c00.1226b"
            ]
        ]
    },
    {
        "id": "9ba31765.31c6d",
        "type": "inject",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Port GNSS push solver message port",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "150",
        "payloadType": "json",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "50759dde.b311ec"
            ]
        ]
    },
    {
        "id": "50759dde.b311ec",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Push GNSS solver message port",
        "func": "global.set('port_gnss_push_solver_message_port', msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5f261175.016e9",
        "type": "comment",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Link it to DAS Parser input",
        "info": "",
        "x": 1170,
        "y": 660,
        "wires": []
    },
    {
        "id": "dcff3f94.950448",
        "type": "comment",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Link it from stream of DAS Parser",
        "info": "",
        "x": 170,
        "y": 260,
        "wires": []
    },
    {
        "id": "87c60ad0.22798",
        "type": "function",
        "z": "6cfcf5f5.9c1c4c",
        "name": "Extract stream_records",
        "func": "if(msg.payload.result.stream_records) {\n    msg.payload = msg.payload.result.stream_records;\n    msg.uplink = { devEui: msg.deveui };\n    return msg;    \n}\nreturn undefined;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "6f1f4c32.c3c7ec",
                "d41c76e9.7c8b08"
            ]
        ]
    },
    {
        "id": "d8db421.50eb84",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 200,
        "y": 880,
        "wires": []
    },
    {
        "id": "21b5b16.1786cce",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 260,
        "y": 460,
        "wires": []
    },
    {
        "id": "3d0c0ab3.c122c6",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 840,
        "wires": []
    },
    {
        "id": "a3ab5325.0f7488",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 480,
        "y": 640,
        "wires": []
    },
    {
        "id": "3a5ac9f8.f19b86",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 490,
        "y": 780,
        "wires": []
    },
    {
        "id": "d41c76e9.7c8b08",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 570,
        "y": 440,
        "wires": []
    },
    {
        "id": "2c62c5aa.b5412a",
        "type": "debug",
        "z": "6cfcf5f5.9c1c4c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 660,
        "y": 400,
        "wires": []
    },
    {
        "id": "77913437.08bc3c",
        "type": "function",
        "z": "fe92c6e7.4ff72",
        "name": "Prepare request",
        "func": "const DAS_URL = global.get('DAS_URL');\nconst DAS_AUTH_TOKEN = global.get('DAS_AUTH_TOKEN');\n\nvar LAT = 45.452761\nvar LON = 5.641854\nvar nav_payload = \"010106D9430816a202a82aeb61df9b2d5031d5367d072aa05209c0c7ae7651d5b8e7203c09a3caba8ea4bf8c8c16558652c17787636a776c44f9294cd5a54356ff4900\"\n\nvar gps_time = 1271763033\n\nvar json_dict = {\n    \"payload\": nav_payload,\n    \"gnss_capture_time\": gps_time,\n    \"gnss_capture_time_accuracy\": 15, \n    \"gnss_assist_position\" : [LAT, LON]\n}\n\nvar headers = {\n    'Accept':'application/json',\n    'Ocp-Apim-Subscription-Key': DAS_AUTH_TOKEN\n}\n\nmsg = {\n    \"url\": DAS_URL,\n    \"headers\": headers,\n    \"payload\": json_dict,\n    \"deveui\": \"56789\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 280,
        "wires": [
            [
                "4ee79366.03e19c"
            ]
        ]
    },
    {
        "id": "4ee79366.03e19c",
        "type": "http request",
        "z": "fe92c6e7.4ff72",
        "name": "GLS Lora Cloud",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://gls.loracloud.com/api/v3/solve/gnss_lr1110_singleframe",
        "tls": "",
        "proxy": "",
        "authType": "basic",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "f0c7be95.066ef8"
            ]
        ]
    },
    {
        "id": "f0c7be95.066ef8",
        "type": "function",
        "z": "fe92c6e7.4ff72",
        "name": "Parse response",
        "func": "var resp = JSON.parse(msg.payload)\n\nvar result = resp.result;\n\nif(result) {\n    msg.payload = {\n        deveui: msg.deveui,\n        lat_sent_fixed : result.llh[0],\n        lon_sent_fixed:   result.llh[1],\n        gdop_sent_fixed:   result.gdop,\n        accuracy_sent_fixed:   result.accuracy,\n    }\n    return msg;\n} else {\n    msg.payload = resp;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 280,
        "wires": [
            [
                "53d25e95.05ea78"
            ]
        ]
    },
    {
        "id": "53d25e95.05ea78",
        "type": "debug",
        "z": "fe92c6e7.4ff72",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "aa830502.1870a",
        "type": "inject",
        "z": "fe92c6e7.4ff72",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "77913437.08bc3c"
            ]
        ]
    },
    {
        "id": "ad182c60.583f8",
        "type": "function",
        "z": "fe92c6e7.4ff72",
        "name": "Prepare GLS request",
        "func": "var URL = \"https://gls.loracloud.com/api/v3/solve/gnss_lr1110_singleframe\" \nvar AUTH_TOKEN =\"AQEAvQksfjvdtGyrUUP+A6zbwizCdQ1NyPa+obEjSpaLAg2sY5wH\"\n\nvar diffSec=315964800;\n\nvar nav_payload = msg.payload.frmPayload.toString(\"hex\");\n\nvar gps_time = msg.payload.time - diffSec;\n\nvar json_dict = {\n    \"payload\": nav_payload,\n//    \"gnss_capture_time_accuracy\": 15, \n//    \"gnss_assist_position\" : [msg.lat, msg.lon],\n    \"gnss_capture_time\": gps_time\n}\n\nvar headers = {\n    'Accept':'application/json',\n    'Ocp-Apim-Subscription-Key': AUTH_TOKEN\n}\n\nmsg = {\n    \"url\": URL,\n    \"headers\": headers,\n    \"payload\": json_dict,\n    \n    \"deveui\":  msg.deveui\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "820f92c8.39ee6",
        "type": "function",
        "z": "fe92c6e7.4ff72",
        "name": "Prepare GLS request",
        "func": "var URL = \"https://gls.loracloud.com/api/v3/solve/gnss_lr1110_singleframe\" \nvar AUTH_TOKEN =\"AQEAvQksfjvdtGyrUUP+A6zbwizCdQ1NyPa+obEjSpaLAg2sY5wH\"\n\nvar diffSec=315964800\n\nvar nav_payload = msg.payload.frmPayload.toString(\"hex\");\n\nvar gps_time = msg.payload.time - diffSec;\n\nvar json_dict = {\n    \"payload\": nav_payload,\n    \"gnss_capture_time\": gps_time,\n    \"gnss_capture_time_accuracy\": 15, \n    \"gnss_assist_position\" : [msg.lat, msg.lon]\n}\n\nvar headers = {\n    'Accept':'application/json',\n    'Ocp-Apim-Subscription-Key': AUTH_TOKEN\n}\n\nmsg = {\n    \"url\": URL,\n    \"headers\": headers,\n    \"payload\": json_dict,\n    \n    \"deveui\":  msg.devEUI\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 220,
        "wires": [
            []
        ]
    }
]
